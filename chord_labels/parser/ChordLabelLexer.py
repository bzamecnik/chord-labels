# Generated from ChordLabel.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2(")
        buf.write("\u00cc\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6")
        buf.write("\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30")
        buf.write("\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3")
        buf.write("$\3$\3%\3%\3%\3&\3&\3\'\3\'\2\2(\3\3\5\4\7\5\t\6\13\7")
        buf.write("\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21")
        buf.write("!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67")
        buf.write("\359\36;\37= ?!A\"C#E$G%I&K\'M(\3\2\2\2\u00cb\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2")
        buf.write("\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2")
        buf.write("\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2")
        buf.write("\2\2\2M\3\2\2\2\3O\3\2\2\2\5Q\3\2\2\2\7S\3\2\2\2\tU\3")
        buf.write("\2\2\2\13W\3\2\2\2\rY\3\2\2\2\17]\3\2\2\2\21a\3\2\2\2")
        buf.write("\23e\3\2\2\2\25i\3\2\2\2\27n\3\2\2\2\31s\3\2\2\2\33x\3")
        buf.write("\2\2\2\35~\3\2\2\2\37\u0086\3\2\2\2!\u008b\3\2\2\2#\u0090")
        buf.write("\3\2\2\2%\u0095\3\2\2\2\'\u009a\3\2\2\2)\u009f\3\2\2\2")
        buf.write("+\u00a4\3\2\2\2-\u00a6\3\2\2\2/\u00a8\3\2\2\2\61\u00aa")
        buf.write("\3\2\2\2\63\u00ac\3\2\2\2\65\u00ae\3\2\2\2\67\u00b0\3")
        buf.write("\2\2\29\u00b2\3\2\2\2;\u00b4\3\2\2\2=\u00b6\3\2\2\2?\u00b8")
        buf.write("\3\2\2\2A\u00ba\3\2\2\2C\u00bc\3\2\2\2E\u00bf\3\2\2\2")
        buf.write("G\u00c2\3\2\2\2I\u00c5\3\2\2\2K\u00c8\3\2\2\2M\u00ca\3")
        buf.write("\2\2\2OP\7*\2\2P\4\3\2\2\2QR\7.\2\2R\6\3\2\2\2ST\7+\2")
        buf.write("\2T\b\3\2\2\2UV\7,\2\2V\n\3\2\2\2WX\7\61\2\2X\f\3\2\2")
        buf.write("\2YZ\7o\2\2Z[\7c\2\2[\\\7l\2\2\\\16\3\2\2\2]^\7o\2\2^")
        buf.write("_\7k\2\2_`\7p\2\2`\20\3\2\2\2ab\7f\2\2bc\7k\2\2cd\7o\2")
        buf.write("\2d\22\3\2\2\2ef\7c\2\2fg\7w\2\2gh\7i\2\2h\24\3\2\2\2")
        buf.write("ij\7o\2\2jk\7c\2\2kl\7l\2\2lm\79\2\2m\26\3\2\2\2no\7o")
        buf.write("\2\2op\7k\2\2pq\7p\2\2qr\79\2\2r\30\3\2\2\2st\7f\2\2t")
        buf.write("u\7k\2\2uv\7o\2\2vw\79\2\2w\32\3\2\2\2xy\7j\2\2yz\7f\2")
        buf.write("\2z{\7k\2\2{|\7o\2\2|}\79\2\2}\34\3\2\2\2~\177\7o\2\2")
        buf.write("\177\u0080\7k\2\2\u0080\u0081\7p\2\2\u0081\u0082\7o\2")
        buf.write("\2\u0082\u0083\7c\2\2\u0083\u0084\7l\2\2\u0084\u0085\7")
        buf.write("9\2\2\u0085\36\3\2\2\2\u0086\u0087\7o\2\2\u0087\u0088")
        buf.write("\7c\2\2\u0088\u0089\7l\2\2\u0089\u008a\78\2\2\u008a \3")
        buf.write("\2\2\2\u008b\u008c\7o\2\2\u008c\u008d\7k\2\2\u008d\u008e")
        buf.write("\7p\2\2\u008e\u008f\78\2\2\u008f\"\3\2\2\2\u0090\u0091")
        buf.write("\7o\2\2\u0091\u0092\7c\2\2\u0092\u0093\7l\2\2\u0093\u0094")
        buf.write("\7;\2\2\u0094$\3\2\2\2\u0095\u0096\7o\2\2\u0096\u0097")
        buf.write("\7k\2\2\u0097\u0098\7p\2\2\u0098\u0099\7;\2\2\u0099&\3")
        buf.write("\2\2\2\u009a\u009b\7u\2\2\u009b\u009c\7w\2\2\u009c\u009d")
        buf.write("\7u\2\2\u009d\u009e\7\66\2\2\u009e(\3\2\2\2\u009f\u00a0")
        buf.write("\7u\2\2\u00a0\u00a1\7w\2\2\u00a1\u00a2\7u\2\2\u00a2\u00a3")
        buf.write("\7\64\2\2\u00a3*\3\2\2\2\u00a4\u00a5\4CI\2\u00a5,\3\2")
        buf.write("\2\2\u00a6\u00a7\7d\2\2\u00a7.\3\2\2\2\u00a8\u00a9\7%")
        buf.write("\2\2\u00a9\60\3\2\2\2\u00aa\u00ab\7\63\2\2\u00ab\62\3")
        buf.write("\2\2\2\u00ac\u00ad\7\64\2\2\u00ad\64\3\2\2\2\u00ae\u00af")
        buf.write("\7\65\2\2\u00af\66\3\2\2\2\u00b0\u00b1\7\66\2\2\u00b1")
        buf.write("8\3\2\2\2\u00b2\u00b3\7\67\2\2\u00b3:\3\2\2\2\u00b4\u00b5")
        buf.write("\78\2\2\u00b5<\3\2\2\2\u00b6\u00b7\79\2\2\u00b7>\3\2\2")
        buf.write("\2\u00b8\u00b9\7:\2\2\u00b9@\3\2\2\2\u00ba\u00bb\7;\2")
        buf.write("\2\u00bbB\3\2\2\2\u00bc\u00bd\7\63\2\2\u00bd\u00be\7\62")
        buf.write("\2\2\u00beD\3\2\2\2\u00bf\u00c0\7\63\2\2\u00c0\u00c1\7")
        buf.write("\63\2\2\u00c1F\3\2\2\2\u00c2\u00c3\7\63\2\2\u00c3\u00c4")
        buf.write("\7\64\2\2\u00c4H\3\2\2\2\u00c5\u00c6\7\63\2\2\u00c6\u00c7")
        buf.write("\7\65\2\2\u00c7J\3\2\2\2\u00c8\u00c9\7P\2\2\u00c9L\3\2")
        buf.write("\2\2\u00ca\u00cb\7<\2\2\u00cbN\3\2\2\2\3\2\2")
        return buf.getvalue()


class ChordLabelLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    NATURAL = 21
    FLAT = 22
    SHARP = 23
    I_1 = 24
    I_2 = 25
    I_3 = 26
    I_4 = 27
    I_5 = 28
    I_6 = 29
    I_7 = 30
    I_8 = 31
    I_9 = 32
    I_10 = 33
    I_11 = 34
    I_12 = 35
    I_13 = 36
    NO_CHORD = 37
    SEPARATOR = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'*'", "'/'", "'maj'", "'min'", "'dim'", 
            "'aug'", "'maj7'", "'min7'", "'dim7'", "'hdim7'", "'minmaj7'", 
            "'maj6'", "'min6'", "'maj9'", "'min9'", "'sus4'", "'sus2'", 
            "'b'", "'#'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", 
            "'8'", "'9'", "'10'", "'11'", "'12'", "'13'", "'N'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "NATURAL", "FLAT", "SHARP", "I_1", "I_2", "I_3", "I_4", "I_5", 
            "I_6", "I_7", "I_8", "I_9", "I_10", "I_11", "I_12", "I_13", 
            "NO_CHORD", "SEPARATOR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "NATURAL", "FLAT", "SHARP", "I_1", "I_2", "I_3", "I_4", 
                  "I_5", "I_6", "I_7", "I_8", "I_9", "I_10", "I_11", "I_12", 
                  "I_13", "NO_CHORD", "SEPARATOR" ]

    grammarFileName = "ChordLabel.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


